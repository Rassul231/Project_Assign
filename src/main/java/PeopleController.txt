package kz.aitu.doxbin.controllers;

import kz.aitu.doxbin.models.People;
import kz.aitu.doxbin.models.User;
import kz.aitu.doxbin.repositories.UserRepositoryInterface;
import kz.aitu.doxbin.services.interfaces.PeopleServiceInterface;
import kz.aitu.doxbin.services.interfaces.UserServiceInterface;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("people")
public class PeopleController {
    private final PeopleServiceInterface service;
    private final UserServiceInterface userService;
    private final UserRepositoryInterface userRepositoryInterface;

    public PeopleController(PeopleServiceInterface service, UserServiceInterface userService, UserRepositoryInterface userRepositoryInterface) {
        this.service = service;
        this.userService = userService;
        this.userRepositoryInterface = userRepositoryInterface;
    }


    @PostMapping("/info/{people_id}")
    public ResponseEntity<People> getById(@PathVariable("people_id") int id, @RequestBody User loginUser){
        String username = loginUser.getUsername();
        String password = loginUser.getPassword();
        User user = userService.getUserByUsername(username);
        if (user.getPassword().equals(password)){
            People people = service.getById(id);
            User user1 = userRepositoryInterface.findByUsername(username);
            user.setBalance(user.getBalance()-20);
            userRepositoryInterface.save(user1);
            if(people == null){
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }else{
                return new ResponseEntity<>(people, HttpStatus.OK);
            }
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteById(@PathVariable("id")int id){
        service.deleteById(id);
        return new ResponseEntity<>("Deleted",HttpStatus.OK);
    }
    @PostMapping("/create")
    public ResponseEntity<People> create(@RequestBody People people){
        People newPeople = service.create(people);
        if(newPeople == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }else{
            return new ResponseEntity<>(newPeople, HttpStatus.CREATED);
        }
    }
    @GetMapping("/fullname/{fullname}")
    public List<People> findByName(@PathVariable("fullname") String fullname){
        List<People> peopleList = service.findByName(fullname);
        return peopleList;
    }
    @GetMapping("/phone/{phone}")
    public List<People> findByPhone(@PathVariable("phone") String phone){
        List<People> peopleList = service.findByPhone(phone);
        return peopleList;
    }
}
